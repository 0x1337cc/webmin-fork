#!/usr/bin/env perl
# Webmin CLI - Allows performing a variety of common Webmin-related
# functions on the command line.
use strict;
use warnings;
BEGIN { $Pod::Usage::Formatter = 'Pod::Text::Color'; }
use 5.010; # Version in CentOS 6

use Getopt::Long qw(:config permute pass_through);
use Pod::Usage;
use Term::ANSIColor qw(:constants);
use File::Spec;
use File::Basename;

sub main {
    my ( $argv ) = @_;
    my ( %opt, $subcmd );
    GetOptions(
        'help|h' => \$opt{'help'},
        'config|c=s' => \$opt{'config'},
        'list-commands|l' => \$opt{'list'},
        'describe|d' => \$opt{'describe'},
        '<>' => sub {
            # Handle unrecognized options, inc. subcommands.
            my($arg) = @_;
            if ($arg =~ m{^-}) {
                say "Usage error: Unknown option $arg.";
                pod2usage(0);
            } else {
                # It must be a subcommand.
                $subcmd = $arg;
                die "!FINISH";
            }
        }
    );
    pod2usage(0) if ( $opt{'help'} );

    $opt{'config'} ||= "/etc/webmin";

    # List commands?
    if ($opt{'list'}) {
        list_commands(\%opt);

        return 0;
    }

    my @remain = @ARGV;
    if ($subcmd) {
        run_command( \%opt, $subcmd, \@remain );
    }
    
    return 0;
}
exit main( \@ARGV ) if !caller(0);

# run_command - Run a subcommand 
# $optref is a reference to an options object passed down from global options
# like --help or a --config path.
sub run_command {
    my ( $optref, $subcmd, $remainref ) = @_;

    # Figure out the Webmin root directory
    my $root = root($optref->{'config'});

    my ($command, $module_name);
    # Check for a root-level command (in "$root/bin")
    my $command_path = File::Spec->catfile($root, 'bin', $subcmd);
    if ( -x $command_path) {
        $command = $command_path;
    } else {
        # Try to extract a module name from the command
        # Get list of directories
        opendir (my $DIR, $root);
        my @module_dirs = grep { -d "$root/$_" } readdir($DIR);
        # See if any of them are a substring of $subcmd
        for my $dir (@module_dirs) {
            if (index($subcmd, $dir) == 0) {
                $module_name = $dir;
                my $barecmd = substr($subcmd, -(length($subcmd)-length($module_name)-1));
                $command = File::Spec->catfile($root, $dir, 'bin', $barecmd);
                # Could be .pl or no extension
                if ( -x $command ) {
                    last;
                } elsif ( -x $command . ".pl" ) {
                    $command = $command . ".pl";
                    last;
                } else {
                    die "$command doesn't exist or is not executable"
                }
            }
        }
    }

    # Merge the options
    # Only handling config, right now...
    # XXX Should we do this with libraries instead of commands?
    # Maybe detect .pm for that possibility.
    my @allopts = ("--config $optref->{'config'}", @$remainref);
    # Run that binch
    system($command, @allopts);
    # Try to exit with the passed through exit code (rarely used, but 
    # why not?)
    if ($? == -1) {
        die RED, "Failed to execute $command: $!", RESET;
    } else {
        exit $? >> 8;
    }
}

sub list_commands {
    my ($optref) = @_;

    my $root = root($optref->{'config'});
    # Find and list global commands
    for my $command (glob ("$root/bin/*")) {
        my ($bin, $path) = fileparse($command);
        if ($bin =~ "webmin") {
            next;
        }
        if ($optref->{'describe'}) {
            # Display name and description
            say YELLOW, "$bin", RESET;
            pod2usage( -verbose => 99,
                       -sections => [ qw(DESCRIPTION) ],
                       -input => $command,
                       -exitval => "NOEXIT");
        } else {
            # Just list the names
            say "$bin";
        }
    } 
    my @modules;
    # Find all module directories with something in bin
    for my $command (glob ("$root/*/bin/*")) {
        my ($bin, $path) = fileparse($command);
        my $module = (split /\//, $path)[-2];
        if ($optref->{'describe'}) {
            # Display name and description
            say YELLOW, "$module-$bin", RESET;
            pod2usage( -verbose => 99,
                       -sections => [ qw(DESCRIPTION) ],
                       -input => $command,
                       -exitval => "NOEXIT");
        } else {
            # Just list the names
            say "$module-$bin";
        }
    }
}

sub root {
    my ($config) = @_;
    open(my $CONF, "<", "$config/miniserv.conf") || die RED,
        "Failed to open $config/miniserv.conf", RESET;
    my $root;
    while (<$CONF>) {
        if (/^root=(.*)/) {
            $root = $1;
        }
    }
    close($CONF);
    # Does the Webmin root exist?
    if ( $root ) {
        die "$root is not a directory. Is --config correct?" unless (-d $root);
    } else {
        die "Unable to determine Webmin installation directory from $ENV{'WEBMIN_CONFIG'}";
    }

    return $root;
}

1;

=pod

=head1 NAME

webmin

=head1 DESCRIPTION

Webmin CLI command to perform many common Webmin tasks from the command line or from scripts.

=head1 SYNOPSIS

webmin [options] subcommand [subcommand options]

=head1 OPTIONS

=over

=item --help, -h

Print this usage summary and exit. Subcommands may also have a usage summary.

=item --config, -c

Specify the full path to the Webmin configuration directory. Defaults to
C</etc/webmin>.

=item --list-commands, -l

List available subcommands.

=item --describe, -d

When listing commands, briefly describe what they do.

=head1 EXIT CODES

0 on success

non-0 on error

=head1 LICENSE AND COPYRIGHT

Copyright 2018 Jamie Cameron <jcameron@webmin.com>, Joe Cooper
<joe@virtualmin.com>.

