#!/usr/bin/env perl
# passwd - change Webmin users password

use strict;
use warnings;
use 5.010;

use Getopt::Long;
use Pod::Usage;
use Term::ANSIColor qw(:constants);

sub main
{
    my %opt;
    GetOptions('help|h'       => \$opt{'help'},
               'config|c=s'   => \$opt{'config'},
               'user|u=s'     => \$opt{'user'},
               'password|p=s' => \$opt{'password'});
    pod2usage(0) if ($opt{'help'});

    $opt{'config'}   ||= "/etc/webmin";
    $opt{'password'} ||= "";

    my $sigkill = sub {
        system("stty echo");
        print "\n^C";
        print "\n";
        exit;
    };
    $SIG{INT} = \&$sigkill;

    change_password(\%opt);

    return 0;
}
exit main(\@ARGV) if !caller(0);

sub change_password
{
    my ($optref) = @_;
    my ($minserv_uconf_file, %lusers, @users, %uinfos, %ulines);
    my $user             = "$optref->{'user'}";
    my $pass             = "$optref->{'password'}";
    my $confdif          = $optref->{'config'};
    my $conf             = "$confdif/config";
    my $mconf            = "$confdif/miniserv.conf";
    my $root             = root($confdif);
    my $encrypt_password = sub {
        my ($pass, $gconfig) = @_;
        if ($gconfig->{'md5pass'} == 1) {

            # Use MD5 encryption
            return &encrypt_md5($pass);
        } elsif ($gconfig->{'md5pass'} == 2) {

            # Use SHA512 encryption
            return &encrypt_sha512($pass);
        } else {

            # Use Unix DES
            srand(time() ^ $$);
            return crypt($pass, chr(int(rand(26)) + 65) . chr(int(rand(26)) + 65));
        }
    };

    # Load libs
    do "$root/acl/md5-lib.pl";
    do "$root/web-lib-funcs.pl";

    # Read and parse configs
    my (%config, %gconfig, %uconfig);
    read_file($mconf, \%config);
    read_file($conf,  \%gconfig);
    $minserv_uconf_file = $config{'userfile'};
    read_file($minserv_uconf_file, \%lusers, undef, undef, ":");
    @users = keys %lusers;
    map {my @uinfo = split(':', "$lusers{$_}"); $uinfos{$_} = \@uinfo} @users;

    # Chech if user exists
    if (!defined($uinfos{$user})) {
        my $user_str = scalar(@users) > 1 ? 'users' : 'user';
        my $user_str2 = scalar(@users) > 1 ? 'are' : 'is';
        die("Error: Webmin user `$user` doesn't exist. Existing Webmin $user_str on your system $user_str2 â€” `", join("`, `", sort(@users)), "`\n");
    }

    # Ask for password on stdin
    my $suc_pre_msg = 'Success:';
    my $suc_msg     = 'updated successfully';
    if (!$pass) {
        print "Enter password for user $user:";
        system("stty -echo");
        $pass = <STDIN>;
        system("stty echo");
        print "\nRetype new password:";
        system("stty -echo");
        my $pass2 = <STDIN>;
        system("stty echo");
        print "\n";
        if ($pass ne $pass2) {
            say "Error: Passwords do not match";
            exit 1;
        }
        chomp $pass;
        if (!$pass) {
            $suc_pre_msg = 'Warning:';
            $suc_msg     = "has been removed";
        }
    }

    # Update with new password and store timestamp
    $uinfos{$user}->[0] = &$encrypt_password($pass, \%gconfig);
    $uinfos{$user}->[5] = time() if ($uinfos{$user}->[5]);
    map {$ulines{$_} = join(":", @{ $uinfos{$_} })} keys %uinfos;

    # Restart Webmin and write new user config file
    system("$confdif/stop >/dev/null 2>&1");
    write_file($minserv_uconf_file, \%ulines, ":");
    system("$confdif/start >/dev/null 2>&1");

    # Print user message
    say "$suc_pre_msg Password for Webmin user `$user` $suc_msg";

    exit 0;
}

sub root
{
    my ($config) = @_;
    open(my $CONF, "<", "$config/miniserv.conf") || die RED, "Failed to open $config/miniserv.conf", RESET;
    my $root;
    while (<$CONF>) {
        if (/^root=(.*)/) {
            $root = $1;
        }
    }
    close($CONF);

    # Does the Webmin root exist?
    if ($root) {
        die "$root is not a directory. Is --config correct?" unless (-d $root);
    } else {

        # Try to guess where Webmin lives, since config file didn't know.
        die "Unable to determine Webmin installation directory from $ENV{'WEBMIN_CONFIG'}";
    }

    return $root;
}

1;

=pod

=head1 NAME

passwd

=head1 DESCRIPTION

This program allows you to change the password of a user in the Webmin password file

=head1 SYNOPSIS

passwd [options]

=head1 OPTIONS

=over

=item --help, -h

Print this usage summary and exit.

Examples of usage:

 - passwd --user root
 
 - passwd --user root --password ycwyMQRVAZY
 
 - passwd --config /usr/local/etc/webmin --user root --password ycwyMQRVAZY

=item --config, -c

Specify the full path to the Webmin configuration directory. Defaults to C</etc/webmin>

=item --user, -u

Existing Webmin user to change password for

=item --password, -p

Set new user password. Using this option may be unsecure.



=back

=head1 LICENSE AND COPYRIGHT

Copyright 2021 Jamie Cameron <jcameron@webmin.com>
               Joe Cooper <joe@virtualmin.com>
               Ilia Rostovtsev <ilia@virtualmin.com>

